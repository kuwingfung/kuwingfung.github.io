<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kuwingfung.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kuwingfung.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-15T02:33:55+00:00</updated><id>https://kuwingfung.github.io/feed.xml</id><title type="html">Max W.F. Ku (古永豐)</title><subtitle>Academic page of Max Ku. </subtitle><entry><title type="html">進化心理學 [好書推介]</title><link href="https://kuwingfung.github.io/blog/2024/" rel="alternate" type="text/html" title="進化心理學 [好書推介]"/><published>2024-02-21T09:46:18+00:00</published><updated>2024-02-21T09:46:18+00:00</updated><id>https://kuwingfung.github.io/blog/-</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2024/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[最近在看的書。 Encrypted TBA]]></summary></entry><entry><title type="html">Notes on Video Diffusion Models</title><link href="https://kuwingfung.github.io/blog/2024/notes-on-video-diffusion-models/" rel="alternate" type="text/html" title="Notes on Video Diffusion Models"/><published>2024-01-26T23:53:48+00:00</published><updated>2024-01-26T23:53:48+00:00</updated><id>https://kuwingfung.github.io/blog/2024/notes-on-video-diffusion-models</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2024/notes-on-video-diffusion-models/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[My handwritten notes on Video Editing models.]]></summary></entry><entry><title type="html">Reflection in 2023 [Encrypted]</title><link href="https://kuwingfung.github.io/blog/2023/reflection-in-2023-encrypted/" rel="alternate" type="text/html" title="Reflection in 2023 [Encrypted]"/><published>2023-11-22T00:12:07+00:00</published><updated>2023-11-22T00:12:07+00:00</updated><id>https://kuwingfung.github.io/blog/2023/reflection-in-2023-encrypted</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/reflection-in-2023-encrypted/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Its been a while since my last blogging post. I put my collection of thoughts throughout 2023 here.]]></summary></entry><entry><title type="html">Implementing Team Fortress 2 (TF2) Shader in C++</title><link href="https://kuwingfung.github.io/blog/2023/implementing-team-fortress-2-tf2-shader-in-c/" rel="alternate" type="text/html" title="Implementing Team Fortress 2 (TF2) Shader in C++"/><published>2023-08-12T09:35:12+00:00</published><updated>2023-08-12T09:35:12+00:00</updated><id>https://kuwingfung.github.io/blog/2023/implementing-team-fortress-2-tf2-shader-in-c</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/implementing-team-fortress-2-tf2-shader-in-c/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[A small project that I did for my Computer Graphics course at uwaterloo.]]></summary></entry><entry><title type="html">RBFN, KSON and Hopfield Network</title><link href="https://kuwingfung.github.io/blog/2023/rbfn-kson-and-hopfield-network/" rel="alternate" type="text/html" title="RBFN, KSON and Hopfield Network"/><published>2023-08-08T15:48:35+00:00</published><updated>2023-08-08T15:48:35+00:00</updated><id>https://kuwingfung.github.io/blog/2023/rbfn-kson-and-hopfield-network</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/rbfn-kson-and-hopfield-network/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We cover Radial Basis Function Network (RBFN), Kohonen’s Self-Organizing Network (KSON) and Hopfield Network.]]></summary></entry><entry><title type="html">Fuzzy Logic Systems</title><link href="https://kuwingfung.github.io/blog/2023/fuzzy-logic-systems/" rel="alternate" type="text/html" title="Fuzzy Logic Systems"/><published>2023-08-04T10:20:33+00:00</published><updated>2023-08-04T10:20:33+00:00</updated><id>https://kuwingfung.github.io/blog/2023/fuzzy-logic-systems</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/fuzzy-logic-systems/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Fuzzy logic was first developed by L.A. Zadeh in 1960’s to extend conventional (binary) crisp logic to make it suitable to incorporate knowledge and mimic human-like approximate reasoning.]]></summary></entry><entry><title type="html">Advanced Shading and Camera Models in Computer Graphics</title><link href="https://kuwingfung.github.io/blog/2023/advanced-shading-and-camera-models-in-computer-graphics/" rel="alternate" type="text/html" title="Advanced Shading and Camera Models in Computer Graphics"/><published>2023-07-27T10:09:44+00:00</published><updated>2023-07-27T10:09:44+00:00</updated><id>https://kuwingfung.github.io/blog/2023/advanced-shading-and-camera-models-in-computer-graphics</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/advanced-shading-and-camera-models-in-computer-graphics/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Advanced Shading, Shadows and Reflections, Advanced Camera Models, Colors and stuffs. I just jot the keynotes here.]]></summary></entry><entry><title type="html">Animations with Particles in Computer Graphics</title><link href="https://kuwingfung.github.io/blog/2023/animations-with-particles-in-computer-graphics/" rel="alternate" type="text/html" title="Animations with Particles in Computer Graphics"/><published>2023-07-04T08:45:59+00:00</published><updated>2023-07-04T08:45:59+00:00</updated><id>https://kuwingfung.github.io/blog/2023/animations-with-particles-in-computer-graphics</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/animations-with-particles-in-computer-graphics/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Animations with Particles and Particle Systems. Lets say we are asked to make an animation of throwing a basketball. How can we do? We can use Position Based or Physically Based Animation.]]></summary></entry><entry><title type="html">Ray Tracing in Computer Graphics</title><link href="https://kuwingfung.github.io/blog/2023/ray-tracing-in-computer-graphics/" rel="alternate" type="text/html" title="Ray Tracing in Computer Graphics"/><published>2023-06-21T07:37:32+00:00</published><updated>2023-06-21T07:37:32+00:00</updated><id>https://kuwingfung.github.io/blog/2023/ray-tracing-in-computer-graphics</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/ray-tracing-in-computer-graphics/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Ray Tracing is another rendering method. Rasterization is an object-based approach to scene rendering, Ray tracing, by contrast, colors the pixels first, then identifies them with objects later.]]></summary></entry><entry><title type="html">Rasterization in Computer Graphics</title><link href="https://kuwingfung.github.io/blog/2023/rasterization-in-computer-graphics/" rel="alternate" type="text/html" title="Rasterization in Computer Graphics"/><published>2023-05-29T15:01:53+00:00</published><updated>2023-05-29T15:01:53+00:00</updated><id>https://kuwingfung.github.io/blog/2023/rasterization-in-computer-graphics</id><content type="html" xml:base="https://kuwingfung.github.io/blog/2023/rasterization-in-computer-graphics/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[How Triangles are drawn in Computer Graphics? How to draw the triangle on the signal display using position of triangle vertices?]]></summary></entry></feed>